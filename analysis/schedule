#!/usr/bin/env python3

"""a quick script to schedule workflows
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import stat

from argparse import ArgumentParser

#-------------------------------------------------

SCALARS = ["dens"]

VECTORS = ["mag", "vel"] # "curr", "vort"]

DIRECTIONS = [None, 0, 1, 2]

COMPONENTS = [None, 0, 1, 2]
MAP2SCALARS = [('' if component is None else '_%d'%component, dict(component=component)) for component in COMPONENTS] \
    + [('_mag', dict(magnitude=True))]

MAP2SCALARS_MAGS = [('', dict(component=None)), ('_mag', dict(magnitude=True))]
MAP2SCALARS_CMPS = [('' if component is None else '_%d'%component, dict(component=component)) for component in COMPONENTS]

DIRECTS = [True, False]

#------------------------

MARKERS = ['o', '^', 's', 'D', 'p', '>', '<', 'v']

#-------------------------------------------------

def sf_nickname(field=None, magnitude=False, component=None, direction=None, direct=False):
    assert field is not None

    tag = field

    if magnitude:
        tag = tag+'-mag'

    elif component is not None:
        tag = tag+'-%d'%component

    if direction is not None:
        tag = tag+'_dir-%d' % direction

    if direct:
        tag += '_dsf'
    else:
        tag += '_wsf'

    return tag

#---

def sf_outpath(base, field=None, magnitude=False, component=None, direction=None, direct=False, outdir='.'):
    nickname = sf_nickname(field=field, magnitude=magnitude, component=component, direction=direction, direct=direct)
    return os.path.join(os.path.abspath(outdir), '%s_%s.hdf' % (base, nickname))

#------------------------

def sf_cmd(
        inpath,
        index,
        base,
        field=None,
        component=None,
        magnitude=False,
        direction=None,
        direct=False,
        verbose=True,
        max_edgelength=None,
        direct_increment=None,
        outdir='.',
    ):

    assert field is not None

    outpath = sf_outpath(
        base,
        field=field,
        magnitude=magnitude,
        component=component,
        direction=direction,
        direct=direct,
        outdir=outdir,
    )
    script = outpath[:-3] + 'sh'

    cmd = ['w4t-structure-function', inpath, outpath, field]

    cmd += ['--index %s' % (' '.join('%d'%_ for _ in index))]

    if verbose:
        cmd += ['--Verbose']

    if max_edgelength is not None:
        cmd += ['--max-edgelength %d' % max_edgelength]

    if direct_increment is not None:
        cmd += ['--direct-increment %d' % direct_increment]

    if magnitude:
        cmd += ['--magnitude']

    elif component is not None:
        cmd += ['--component %d' % component]

    if direction is not None:
        cmd += ['--direction %d' % direction]

    if direct:
        cmd += ['--direct']

    return cmd, script

#------------------------

def plot_cmd(base, tag, combo, verbose=False, outdir='.'):

    plt = [
        'w4t-plot-structure-function',
        '--title "%s"' % base,
        '--output-dir %s' % os.path.abspath(outdir),
        '--tag %s' % tag,
    ]
    for cmd, marker in zip(combo, MARKERS):
        nickname = sf_nickname(**cmd)
        plt += ['--source %s %s' % (nickname, sf_outpath(base, outdir=outdir, **cmd)), '--marker %s %s' % (nickname, marker)]

    if verbose:
        plt += ['--Verbose']

    script = os.path.join(os.path.abspath(outdir), 'plot-sf_%s_%s.sh' % (base, tag))

    return plt, script

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('flow', type=str)
parser.add_argument('snap', type=int)

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-d', '--data-dir', default='.', type=str)

parser.add_argument('--max-edgelength', default=None, type=int)
parser.add_argument('--index', nargs='*', type=int, default=[1, 2, 3, 4, 5, 6])

parser.add_argument('--direct-increment', default=None, type=int)

parser.add_argument('-v', '--verbose', default=False, action='store_true')
parser.add_argument('-V', '--Verbose', default=False, action='store_true')

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

args.verbose |= args.Verbose

#-------------------------------------------------

base = '%s_%04d' % (args.flow, args.snap)
inpath = os.path.join(os.path.abspath(args.data_dir), base+'.hdf')

#------------------------

# schedule jobs that compute structure functions

commands = [dict()]

# add different fields
scalars = []
for field in SCALARS:
    scalars += [dict(field=field, **cmd) for cmd in commands] # default map2scalar: just take the value of the field

vectors = []
for field in VECTORS:
    for cmd in commands:
        vectors += [dict(field=field, **map2scalar, **cmd) for _, map2scalar in MAP2SCALARS]

commands = scalars + vectors

#---

# add different directions
directions = []
for cmd in commands:
    directions += [dict(direction=direction, **cmd) for direction in DIRECTIONS]

commands = directions

#---

# add different methods for computing structure function
methods = []
for cmd in commands:
    methods += [dict(direct=direct, **cmd) for direct in DIRECTS]

commands = methods

#------------------------

if args.verbose:
    print('writing individual structure function jobs')

scripts = []
for cmd in commands:

    cmd_str, script = sf_cmd(
        inpath,
        args.index,
        base,
        verbose=args.verbose,
        max_edgelength=args.max_edgelength,
        direct_increment=args.direct_increment,
        outdir=args.output_dir,
        **cmd
    )

    if args.Verbose:
        print('    '+script)

    with open(script, 'w') as obj:
        obj.write('#!/bin/bash')
        obj.write('\n\n# %s' % base)
        for key, val in cmd.items():
            obj.write('\n# %s : %s' % (key, val))
        obj.write('\n\n%s \\\n|| exit 1' % (' \\\n    '.join(cmd_str)))

    os.chmod(script, os.stat(script).st_mode | stat.S_IEXEC)

    scripts.append(os.path.abspath(script))

#---

script = os.path.join(args.output_dir, 'sf-%s.sh' % base)
if args.verbose:
    print('writing overall workflow: '+script)

with open(script, 'w') as obj:
    obj.write('#!/bin/bash')
    obj.write('\n\n# %s\n' % (base.replace('_', ' ')))
    for s in scripts:
        obj.write('\n%s || exit 1' % s)

os.chmod(script, os.stat(script).st_mode | stat.S_IEXEC)

#-------------------------------------------------

# schedule jobs that make comparison plots

combos = []

# iterate over scalars
for field in SCALARS:
    # for each direction, compare wsf to dsf
    for direction in DIRECTIONS:
        cmd = dict(field=field, direction=direction)
        if direction is None:
            tag = field
        else:
            tag = '%s_dir-%d'%(field, direction)
        combos.append((tag+'_compare-methods', [dict(direct=direct, **cmd) for direct in DIRECTS]))

    # for each method, compare directions
    for direct in DIRECTS:
        cmd = dict(field=field, direct=direct)
        if direct:
            tag = '%s_dsf' % field
        else:
            tag = '%s_wsf' % field

        combos.append((tag+'_compare-dirs', [dict(direction=direction, **cmd) for direction in DIRECTIONS]))

# iterate over vectors
for field in VECTORS:
    # compare wsf to dsf
    for name, map2scalar in MAP2SCALARS:
        for direction in DIRECTIONS:
            cmd = dict(field=field, direction=direction, **map2scalar)
            tag = '%s%s' % (field, name)
            if direction is not None:
                tag = tag+'_dir-%d' % direction
            combos.append((tag+'_compare-methods', [cmd, dict(direct=True, **cmd)]))

    # compare directions
    for name, map2scalar in MAP2SCALARS:
        for direct in DIRECTS:
            cmd = dict(field=field, direct=direct, **map2scalar)
            if direct:
                tag = '%s%s_dsf' % (field, name)
            else:
                tag = '%s%s_wsf' % (field, name)
            combos.append((tag+'_compare-dirs', [dict(direction=direction, **cmd) for direction in DIRECTIONS]))

    # compare map2scalar
    for direction in DIRECTIONS:
        tag = field
        if direction is not None:
            tag = tag+'_dir-%d' % direction
        for direct in DIRECTS:
            cmd = dict(field=field, direction=direction, direct=direct)
            if direct:
                _tag = tag+'_dsf'
            else:
                _tag = tag+'_wsf'
            combos.append((_tag+'_compare-map2scalar_magnitudes', [dict(**map2scalar, **cmd) for _, map2scalar in MAP2SCALARS_MAGS]))
            combos.append((_tag+'_compare-map2scalar_components', [dict(**map2scalar, **cmd) for _, map2scalar in MAP2SCALARS_CMPS]))

#------------------------

if args.verbose:
    print('writing individual plotting jobs')

scripts = []
for tag, combo in combos:

    cmd_str, script = plot_cmd(base, tag, combo, verbose=args.verbose, outdir=args.output_dir)

    if args.Verbose:
        print('    '+script)

    with open(script, 'w') as obj:
        obj.write('#!/bin/bash')
        obj.write('\n\n# %s' % base)
        for cmd in combo:
            obj.write('\n# %s' % str(cmd))
        obj.write('\n\n%s \\\n|| exit 1' % (' \\\n    '.join(cmd_str)))

    os.chmod(script, os.stat(script).st_mode | stat.S_IEXEC)

    scripts.append(os.path.abspath(script))

#---

script = os.path.join(args.output_dir, 'plot-sf-%s.sh' % base)
if args.verbose:
    print('writing overall workflow: '+script)

with open(script, 'w') as obj:
    obj.write('#!/bin/bash')
    obj.write('\n\n# %s\n' % (base.replace('_', ' ')))
    for s in sorted(scripts):
        obj.write('\n%s || exit 1' % s)

os.chmod(script, os.stat(script).st_mode | stat.S_IEXEC)
