#!/usr/bin/env python3

"""a quick script to schedule workflows
"""
__author__ = "Reed Essick (reed.essick@gmail.com)"

#-------------------------------------------------

import os
import stat

from argparse import ArgumentParser

#-------------------------------------------------

def sf_outpath(base, field=None, magnitude=False, component=None, direction=None, direct=False, outdir='.'):

    assert field is not None

    tag = '%s_%s' % (base, field)

    if magnitude:
        tag = tag+'-mag'

    elif component is not None:
        tag = tag+'-%d'%component

    if direction is not None:
        tag = tag+'_dir-%d' % direction

    if direct:
        tag += '_dsf'
    else:
        tag += '_wsf'

    return os.path.join(os.path.abspath(outdir), tag+'.hdf')

#------------------------

def sf_cmd(
        inpath,
        index,
        base,
        field=None,
        component=None,
        magnitude=False,
        direction=None,
        direct=False,
        verbose=True,
        max_edgelength=None,
        direct_increment=None,
        outdir='.',
    ):

    assert field is not None

    outpath = sf_outpath(base, field, magnitude=magnitude, component=component, direction=direction, direct=direct, outdir=outdir)

    cmd = ['w4t-structure-function', inpath, outpath, field]

    cmd += ['--index %s' % (' '.join('%d'%_ for _ in index))]

    if verbose:
        cmd += ['--Verbose']

    if max_edgelength is not None:
        cmd += ['--max-edgelength %d' % max_edgelength]

    if direct_increment is not None:
        cmd += ['--direct-increment %d' % direct_increment]

    if magnitude:
        cmd += ['--magnitude']

    elif component is not None:
        cmd += ['--component %d' % component]

    if direction is not None:
        cmd += ['--direction %d' % direction]

    if direct:
        cmd += ['--direct']

    return cmd, outpath

#-------------------------------------------------

parser = ArgumentParser()

parser.add_argument('flow', type=str)
parser.add_argument('snap', type=int)

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-d', '--data-dir', default='.', type=str)

parser.add_argument('--max-edgelength', default=None, type=int)
parser.add_argument('--index', nargs='*', type=int, default=[1, 2, 3, 4, 5, 6])

parser.add_argument('--direct-increment', default=None, type=int)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

args = parser.parse_args()

os.makedirs(args.output_dir, exist_ok=True)

#-------------------------------------------------

base = '%s_%04d' % (args.flow, args.snap)
inpath = os.path.join(os.path.abspath(args.data_dir), base+'.hdf')

#------------------------

# create commands
commands = [dict()]

# add different fields
scalars = []
for field in ['dens']:
    scalars += [dict(field=field, **cmd) for cmd in commands] # default map2scalar: just take the value of the field

vectors = []
for field in ['mag', 'vel']: # 'curr', 'vort']:
    for cmd in commands:
        vectors += [
            dict(field=field, **cmd), # default map2scalar: magnitude of differences btwn vectors
            dict(field=field, magnitude=True, **cmd), # magnitude
        ]
        vectors += [dict(field=field, component=component, **cmd) for component in range(3)]

commands = scalars + vectors

#---

# add different directions
directions = []
for cmd in commands:
    directions += [cmd] + [dict(direction=direction, **cmd) for direction in range(3)]

commands = directions

#---

# add different methods for computing structure function
methods = []
for cmd in commands:
    methods += [cmd, dict(direct=True, **cmd)]

commands = methods

#------------------------

if args.verbose:
    print('writing individual jobs')
scripts = []
for cmd in commands:

    cmd_str, script = sf_cmd(
        inpath,
        args.index,
        base,
        verbose=args.verbose,
        max_edgelength=args.max_edgelength,
        direct_increment=args.direct_increment,
        outdir=args.output_dir,
        **cmd
    )

    if args.verbose:
        print('    '+script)

    with open(script, 'w') as obj:
        obj.write('#!/bin/bash')
        obj.write('\n\n# %s' % base)
        for key, val in cmd.items():
            obj.write('\n# %s : %s' % (key, val))
        obj.write('\n\n%s \\\n|| exit 1' % (' \\\n    '.join(cmd_str)))

    os.chmod(script, os.stat(script).st_mode | stat.S_IEXEC)

    scripts.append(os.path.abspath(script))

#---

script = os.path.join(args.output_dir, 'sf-%s.sh' % base)
if args.verbose:
    print('writing overall workflow: '+script)

with open(script, 'w') as obj:
    obj.write('#!/bin/bash')
    obj.write('\n\n# %s\n' % (base.replace('_', ' ')))
    for s in sorted(scripts):
        obj.write('\n%s || exit 1' % s)

os.chmod(script, os.stat(script).st_mode | stat.S_IEXEC)
